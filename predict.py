from sklearn.ensemble import RandomForestClassifier
from GetCorpus import GetDataSet
import os, argparse, psutil, glob
from GetCorpus import GetDataSet
from sklearn.feature_extraction.text import TfidfVectorizer as TF
from sklearn.feature_selection import SelectKBest, chi2
import numpy as np
from sklearn.externals import joblib

def MyTokenizer(Str):
    return Str.split()

def main(Args):
    PredDir = Args.predictdir
    NumFeaturesToBeSelected = Args.numfeatures
    ProcessNo = Args.processno
    TimeOut = Args.timeout
    GetDataSet(PredDir, ProcessNo, TimeOut)

    AllPredSamples = glob.glob(os.path.join(PredDir,'*txt'))

    filename1 = 'finalized_vector.sav'
    FeatureVectorizer = joblib.load(filename1)

    X = FeatureVectorizer.transform(AllPredSamples)
    Features = FeatureVectorizer.get_feature_names()

    if len(Features) > NumFeaturesToBeSelected:
        #with feature selection
        filename2 = 'finalized_vector1.sav'
        FSAlgo = joblib.load(filename2)
        XPred = FSAlgo.transform(X)
    else:
        XPred = X
    
    # rfc = RandomForestClassifier(bootstrap=False, class_weight=None, criterion='gini',
    #         max_depth=None, max_features='auto', max_leaf_nodes=None,
    #         min_impurity_decrease=0.0, min_impurity_split=None,
    #         min_samples_leaf=1, min_samples_split=2,
    #         min_weight_fraction_leaf=0.0, n_estimators=50, n_jobs=None,
    #         oob_score=False, random_state=None, verbose=0,
    #         warm_start=False)
    filename = 'finalized_model.sav'
    rfc = joblib.load(filename)

    YPred = rfc.predict(XPred)
    print "Result - " , YPred



def ParseArgs():
    Args = argparse.ArgumentParser("UserInput")
    Args.add_argument("--predictdir", default="predictApks",
                      help="Absolute path to directory containing malware apks")
    Args.add_argument("--numfeatures", default=5000, type=int,
                      help="Number of top features to select")
    Args.add_argument("--processno", default=psutil.cpu_count(), type=int,
                      help="Number of processes scheduled")
    Args.add_argument("--timeout", default=120, type=int,
                      help="Max number of seconds that can be used for extracting CFG signature features from an apk")

    return Args.parse_args()

if __name__ == "__main__":
    main(ParseArgs())


# python predict.py --predictdir predict --numfeatures 30000